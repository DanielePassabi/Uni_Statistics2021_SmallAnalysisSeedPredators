theme_ipsum() +
labs(title = "Mean seeds available through time",
subtitle = "Species: Pseudospondias microcarpa\nDistance: 10m",
x = "Date", y = "Seeds")
psd2 = df_psd_25 %>%
ggplot( aes(x=date, y=mean_seeds)) +
geom_line(color="grey") +
geom_point(shape=21, color="black", fill=psd_col, size=2.5) +
ylim(0, 5) +
theme_ipsum() +
labs(title = "",
subtitle = "Species: Pseudospondias microcarpa\nDistance: 25m",
x = "Date", y = "Seeds")
plot_grid(pol1, pol2, labels = "", ncol = 2)
plot_grid(psd1, psd2, labels = "", ncol = 2)
df_clean$seeds_rem = ifelse(df_clean$taken == 0, FALSE, TRUE)
datatable(df_clean, rownames = FALSE)
summary(df_clean$seeds_rem)
successes = 97
n = 890 + 97
emp_prob = successes/n
message("Number of trials: ", n, "\nProbability of seeds removal: ", round(emp_prob,4))
x1 = 0:n
df = data.frame(x = x1, y = dbinom(x1, n, emp_prob))
plot_full = ggplot(df, aes(x = x, y = y)) +
geom_bar(stat = "identity", col = general_col, fill = general_col) +
xlab("Number of successes") +
ylab("Density") +
ylim(0,0.05) +
labs(title = "Binomial distribution",
subtitle = "n=987\np=0.0983") +
theme_ipsum()
plot_zoom = ggplot(df, aes(x = x, y = y)) +
geom_bar(stat = "identity", col = general_col, fill = general_col) +
xlab("Number of successes") +
xlim(50,150) +
ylab("Density") +
ylim(0,0.05) +
labs(title = "Binomial distribution",
subtitle = "n=987\np=0.0983") +
theme_ipsum()
plot_full
plot_zoom
successes = sum(df_clean$taken)
n = sum(df_clean$available)
emp_prob = successes/n
message("Number of trials: ", n, "\nNumber of successes: ", successes, "\nProbability of seeds removal: ", round(emp_prob,4))
x1 = 0:n
df = data.frame(x = x1, y = dbinom(x1, n, emp_prob))
plot_full = ggplot(df, aes(x = x, y = y)) +
geom_bar(stat = "identity", col = general_col, fill = general_col) +
xlab("Number of successes") +
ylab("Density") +
ylim(0,0.03) +
labs(title = "Binomial distribution",
subtitle = "Focus on each individual seed\n\nn=3620\np=0.0685") +
theme_ipsum()
plot_zoom = ggplot(df, aes(x = x, y = y)) +
geom_bar(stat = "identity", col = general_col, fill = general_col) +
xlab("Number of successes") +
xlim(150,350) +
ylab("Density") +
ylim(0,0.03) +
labs(title = "Binomial distribution",
subtitle = "Focus on each individual seed\n\nn=3620\np=0.0685") +
theme_ipsum()
plot_full
plot_zoom
df_clean$p_seed_rem = round(df_clean$taken / df_clean$available, 4)
datatable(df_clean, rownames = FALSE)
model_dist = lm(p_seed_rem~dist, data=df_clean)
summary(model_dist)
# LM on DISTANCE
ggplot(df_clean, aes(x = dist, y = p_seed_rem, color = species)) +
geom_point(
alpha=0.5,
size=4,
stroke = 1
) +
geom_smooth(method = "lm", formula= y~x, col = secondary_col) +
xlim(8,27) +
theme_ipsum() +
scale_color_manual(values=c(pol_col, psd_col)) +
labs(title = "LM based on Distance",
x = "Distance",
y = "Probability of seed removal") +
theme(legend.title = element_blank())
# We create the sub-datasets
df_pol = df_clean[df_clean$species == "pol",]
df_psd = df_clean[df_clean$species == "psd",]
# We create two distinct linear models
model_dist_pol = lm(p_seed_rem~dist, data=df_pol)
model_dist_psd = lm(p_seed_rem~dist, data=df_psd)
summary(model_dist_pol)
summary(model_dist_psd)
model_species = lm(p_seed_rem~species, data=df_clean)
print(anova(model_species))
summary(model_species)
par(mfrow = c(2,2))
plot(model_species)
model_time = lm(p_seed_rem~tcum, data=df_clean)
summary(model_time)
# LM on CUMULATIVE TIME
ggplot(df_clean, aes(x = tcum, y = p_seed_rem, color = species)) +
geom_point(
alpha=0.8,
size=4,
stroke = 1
) +
geom_smooth(method = "lm", formula= y~x, col = secondary_col) +
theme_ipsum() +
scale_color_manual(values=c(pol_col, psd_col)) +
labs(title = "LM based on Cumulative Time",
x = "Cumulative Time",
y = "Probability of seed removal") +
theme(legend.title = element_blank())
# Poly of grade 2
model_time_poly2 = lm(p_seed_rem~poly(tcum,2), data=df_clean)
summary(model_time_poly2)
# Poly of grade 3
model_time_poly3 = lm(p_seed_rem~poly(tcum,3), data=df_clean)
summary(model_time_poly3)
# Plots of the polynomial models
# Grade 2
ggplot(df_clean, aes(x = tcum, y = p_seed_rem, color = species)) +
geom_point(
alpha=0.8,
size=4,
stroke = 1
) +
geom_smooth(method = "lm", formula= y~poly(x,2), col = secondary_col) +
theme_ipsum() +
scale_color_manual(values=c(pol_col, psd_col)) +
labs(title = "LM based on Cumulative Time",
subtitle = "Polynomial of grade 2",
x = "Cumulative Time",
y = "Probability of seed removal") +
theme(legend.title = element_blank())
# Grade 3
ggplot(df_clean, aes(x = tcum, y = p_seed_rem, color = species)) +
geom_point(
alpha=0.8,
size=4,
stroke = 1
) +
geom_smooth(method = "lm", formula= y~poly(x,3), col = secondary_col) +
theme_ipsum() +
scale_color_manual(values=c(pol_col, psd_col)) +
labs(title = "LM based on Cumulative Time",
subtitle = "Polynomial of grade 3",
x = "Cumulative Time",
y = "Probability of seed removal") +
theme(legend.title = element_blank())
par(mfrow = c(2,2))
plot(model_time_poly3)
df_clean$month = as.factor(months(df_clean$date))
datatable(df_clean, rownames = FALSE)
model_month = lm(p_seed_rem~month, data=df_clean)
print(anova(model_month))
summary(model_month)
TukeyHSD(aov(model_month))
par(mfrow = c(2,2))
plot(model_month)
# create a simple df
col_names = c("model", "AIC", "BIC")
models = c("distance", "species", "cumulative time", "cumulative time (poly of grade 2)", "cumulative time (poly of grade 3)", "month")
AIC = c(AIC(model_dist), AIC(model_species), AIC(model_time), AIC(model_time_poly2), AIC(model_time_poly3), AIC(model_month))
BIC = c(BIC(model_dist), BIC(model_species), BIC(model_time), BIC(model_time_poly2), BIC(model_time_poly3), BIC(model_month))
eval_df = data.frame(models, AIC, BIC)
datatable(eval_df, rownames = FALSE, class = 'cell-border stripe')
model_exp_1 = lm(p_seed_rem~dist+species+month+tcum+available, data=df_clean)
summary(model_exp_1)
model_exp_2 = lm(p_seed_rem~species+month, data=df_clean)
summary(model_exp_2)
step(model_exp_1)
par(mfrow = c(2,2))
plot(model_exp_2)
model_exp_3 = lm(p_seed_rem~species+poly(tcum,3), data=df_clean)
summary(model_exp_3)
par(mfrow = c(2,2))
plot(model_exp_3)
# create a simple df
col_names = c("model", "AIC", "BIC")
models = c("distance", "species", "cumulative time", "cumulative time (poly of grade 2)", "cumulative time (poly of grade 3)", "month", "species + month", "species + cumulative time (poly of grade 3)")
AIC = c(AIC(model_dist), AIC(model_species), AIC(model_time), AIC(model_time_poly2), AIC(model_time_poly3), AIC(model_month), AIC(model_exp_2), AIC(model_exp_3))
BIC = c(BIC(model_dist), BIC(model_species), BIC(model_time), BIC(model_time_poly2), BIC(model_time_poly3), BIC(model_month), BIC(model_exp_2), BIC(model_exp_3))
eval_df = data.frame(models, AIC, BIC)
datatable(eval_df, rownames = FALSE, class = 'cell-border stripe')
# Convert RMD in R Script
knitr::purl("analysis.Rmd")
# LIBRARIES
library(emdbook)    # dataset library
library(DT)         # nicer display of dataframes
library(tidyverse)
library(ggplot2)    # plotting graphs
library(hrbrthemes) # theme for plotting
library(cowplot)    # useful for plots side by side
# PLOT COLORS
general_col = "#9792E3"
secondary_col = "#554DD1"
pol_col = "#FF7477"
psd_col = "#9CF6F6"
significant_col = "#70AE6E"
not_significant_col = "#F4743B"
# LOCAL LANGUAGE
Sys.setlocale("LC_ALL", "English") # we want the plots to be in English
df = SeedPred
# what are the types of the columns?
glimpse(df)
# exploration of initial dataframe
datatable(df, rownames = FALSE)
df$dist = as.numeric(as.character(df$dist))
df = df[df$species == "pol" | df$species == "psd",] # keep the two species
df = df[df$available != 0 & !is.na(df$available),]  # remove rows where available = 0 or NA
df_clean = df[!is.na(df$seeds),]                    # remove rows where seeds is NA
datatable(df_clean, rownames = FALSE)
# Find the frequencies of the species
df_freqs = df_clean %>%
group_by(species, dist) %>%
summarise(n = n())
# Nicer names
df_freqs$species = ifelse(df_freqs$species == "pol", "Polyscias fulva (pol)", "Pseudospondias microcarpa (psd)")
df_freqs$dist = ifelse(df_freqs$dist == 10, "10 meters", "25 meters")
# Plot the results
ggplot(df_freqs, aes(x=species, y=n, fill=dist)) +
geom_bar(stat = "identity", width = 0.6, position = position_dodge()) +
theme_ipsum() +
labs(title = "Occurrences of each species",
x = "Species", y = "Occurrences") +
scale_fill_manual("legend", values = c("10 meters" = general_col, "25 meters" = secondary_col)) +
theme(legend.title = element_blank()) +
geom_text(aes(label=n), position=position_dodge(width=0.6), vjust=1.5)
example_station = 19
example_distance = 25
df_stat_65 = df_clean[df_clean$station == example_station & df_clean$dist == example_distance,]
df_stat_65 %>%
ggplot( aes(x=date, y=seeds)) +
geom_line(color="grey") +
geom_point(shape=21, color="black", fill=pol_col, size=6) +
theme_ipsum() +
labs(title = "Seeds predation through time",
subtitle = "Station: 19\nSpecies: Polyscias fulva (pol)\nDistance: 25m",
x = "Date", y = "Seeds")
# CASE 1: pol, 10
df_pol_10 = df_clean[df_clean$species == "pol" & df_clean$dist == 10,]
# count how many measuraments there are for each date
df_temp_1 = df_pol_10 %>%
count(date)
# count the total number of seeds for each date
df_temp_2 = df_pol_10 %>%
group_by(date) %>%
summarise(total_seeds = sum(seeds))
# merge the information to obtain mean seeds available
df_temp_2$n = df_temp_1$n
df_temp_2$mean_seeds = df_temp_2$total_seeds / df_temp_2$n
df_pol_10 = df_temp_2
###
# CASE 2: pol, 25
df_pol_25 = df_clean[df_clean$species == "pol" & df_clean$dist == 25,]
# count how many measuraments there are for each date
df_temp_1 = df_pol_25 %>%
count(date)
# count the total number of seeds for each date
df_temp_2 = df_pol_25 %>%
group_by(date) %>%
summarise(total_seeds = sum(seeds))
# merge the information to obtain mean seeds available
df_temp_2$n = df_temp_1$n
df_temp_2$mean_seeds = df_temp_2$total_seeds / df_temp_2$n
df_pol_25 = df_temp_2
###
# CASE 3: psd, 10
df_psd_10 = df_clean[df_clean$species == "psd" & df_clean$dist == 10,]
# count how many measuraments there are for each date
df_temp_1 = df_psd_10 %>%
count(date)
# count the total number of seeds for each date
df_temp_2 = df_psd_10 %>%
group_by(date) %>%
summarise(total_seeds = sum(seeds))
# merge the information to obtain mean seeds available
df_temp_2$n = df_temp_1$n
df_temp_2$mean_seeds = df_temp_2$total_seeds / df_temp_2$n
df_psd_10 = df_temp_2
###
# CASE 4: psd, 25
df_psd_25 = df_clean[df_clean$species == "psd" & df_clean$dist == 25,]
# count how many measuraments there are for each date
df_temp_1 = df_psd_25 %>%
count(date)
# count the total number of seeds for each date
df_temp_2 = df_psd_25 %>%
group_by(date) %>%
summarise(total_seeds = sum(seeds))
# merge the information to obtain mean seeds available
df_temp_2$n = df_temp_1$n
df_temp_2$mean_seeds = df_temp_2$total_seeds / df_temp_2$n
df_psd_25 = df_temp_2
# Now we plot
pol1 = df_pol_10 %>%
ggplot( aes(x=date, y=mean_seeds)) +
geom_line(color="grey") +
geom_point(shape=21, color="black", fill=pol_col, size=2.5) +
ylim(0, 5) +
theme_ipsum() +
labs(title = "Mean seeds available through time",
subtitle = "Species: Polyscias fulva\nDistance: 10m",
x = "Date", y = "Seeds")
pol2 = df_pol_25 %>%
ggplot( aes(x=date, y=mean_seeds)) +
geom_line(color="grey") +
geom_point(shape=21, color="black", fill=pol_col, size=2.5) +
ylim(0, 5) +
theme_ipsum() +
labs(title = "",
subtitle = "Species: Polyscias fulva\nDistance: 25m",
x = "Date", y = "Seeds")
psd1 = df_psd_10 %>%
ggplot( aes(x=date, y=mean_seeds)) +
geom_line(color="grey") +
geom_point(shape=21, color="black", fill=psd_col, size=2.5) +
ylim(0, 5) +
theme_ipsum() +
labs(title = "Mean seeds available through time",
subtitle = "Species: Pseudospondias microcarpa\nDistance: 10m",
x = "Date", y = "Seeds")
psd2 = df_psd_25 %>%
ggplot( aes(x=date, y=mean_seeds)) +
geom_line(color="grey") +
geom_point(shape=21, color="black", fill=psd_col, size=2.5) +
ylim(0, 5) +
theme_ipsum() +
labs(title = "",
subtitle = "Species: Pseudospondias microcarpa\nDistance: 25m",
x = "Date", y = "Seeds")
plot_grid(pol1, pol2, labels = "", ncol = 2)
plot_grid(psd1, psd2, labels = "", ncol = 2)
df_clean$seeds_rem = ifelse(df_clean$taken == 0, FALSE, TRUE)
datatable(df_clean, rownames = FALSE)
summary(df_clean$seeds_rem)
successes = 97
n = 890 + 97
emp_prob = successes/n
message("Number of trials: ", n, "\nProbability of seeds removal: ", round(emp_prob,4))
x1 = 0:n
df = data.frame(x = x1, y = dbinom(x1, n, emp_prob))
plot_full = ggplot(df, aes(x = x, y = y)) +
geom_bar(stat = "identity", col = general_col, fill = general_col) +
xlab("Number of successes") +
ylab("Density") +
ylim(0,0.05) +
labs(title = "Binomial distribution",
subtitle = "n=987\np=0.0983") +
theme_ipsum()
plot_zoom = ggplot(df, aes(x = x, y = y)) +
geom_bar(stat = "identity", col = general_col, fill = general_col) +
xlab("Number of successes") +
xlim(50,150) +
ylab("Density") +
ylim(0,0.05) +
labs(title = "Binomial distribution",
subtitle = "n=987\np=0.0983") +
theme_ipsum()
plot_full
plot_zoom
successes = sum(df_clean$taken)
n = sum(df_clean$available)
emp_prob = successes/n
message("Number of trials: ", n, "\nNumber of successes: ", successes, "\nProbability of seeds removal: ", round(emp_prob,4))
x1 = 0:n
df = data.frame(x = x1, y = dbinom(x1, n, emp_prob))
plot_full = ggplot(df, aes(x = x, y = y)) +
geom_bar(stat = "identity", col = general_col, fill = general_col) +
xlab("Number of successes") +
ylab("Density") +
ylim(0,0.03) +
labs(title = "Binomial distribution",
subtitle = "Focus on each individual seed\n\nn=3620\np=0.0685") +
theme_ipsum()
plot_zoom = ggplot(df, aes(x = x, y = y)) +
geom_bar(stat = "identity", col = general_col, fill = general_col) +
xlab("Number of successes") +
xlim(150,350) +
ylab("Density") +
ylim(0,0.03) +
labs(title = "Binomial distribution",
subtitle = "Focus on each individual seed\n\nn=3620\np=0.0685") +
theme_ipsum()
plot_full
plot_zoom
df_clean$p_seed_rem = round(df_clean$taken / df_clean$available, 4)
datatable(df_clean, rownames = FALSE)
model_dist = lm(p_seed_rem~dist, data=df_clean)
summary(model_dist)
# LM on DISTANCE
ggplot(df_clean, aes(x = dist, y = p_seed_rem, color = species)) +
geom_point(
alpha=0.5,
size=4,
stroke = 1
) +
geom_smooth(method = "lm", formula= y~x, col = secondary_col) +
xlim(8,27) +
theme_ipsum() +
scale_color_manual(values=c(pol_col, psd_col)) +
labs(title = "LM based on Distance",
x = "Distance",
y = "Probability of seed removal") +
theme(legend.title = element_blank())
# We create the sub-datasets
df_pol = df_clean[df_clean$species == "pol",]
df_psd = df_clean[df_clean$species == "psd",]
# We create two distinct linear models
model_dist_pol = lm(p_seed_rem~dist, data=df_pol)
model_dist_psd = lm(p_seed_rem~dist, data=df_psd)
summary(model_dist_pol)
summary(model_dist_psd)
model_species = lm(p_seed_rem~species, data=df_clean)
print(anova(model_species))
summary(model_species)
par(mfrow = c(2,2))
plot(model_species)
model_time = lm(p_seed_rem~tcum, data=df_clean)
summary(model_time)
# LM on CUMULATIVE TIME
ggplot(df_clean, aes(x = tcum, y = p_seed_rem, color = species)) +
geom_point(
alpha=0.8,
size=4,
stroke = 1
) +
geom_smooth(method = "lm", formula= y~x, col = secondary_col) +
theme_ipsum() +
scale_color_manual(values=c(pol_col, psd_col)) +
labs(title = "LM based on Cumulative Time",
x = "Cumulative Time",
y = "Probability of seed removal") +
theme(legend.title = element_blank())
# Poly of grade 2
model_time_poly2 = lm(p_seed_rem~poly(tcum,2), data=df_clean)
summary(model_time_poly2)
# Poly of grade 3
model_time_poly3 = lm(p_seed_rem~poly(tcum,3), data=df_clean)
summary(model_time_poly3)
# Plots of the polynomial models
# Grade 2
ggplot(df_clean, aes(x = tcum, y = p_seed_rem, color = species)) +
geom_point(
alpha=0.8,
size=4,
stroke = 1
) +
geom_smooth(method = "lm", formula= y~poly(x,2), col = secondary_col) +
theme_ipsum() +
scale_color_manual(values=c(pol_col, psd_col)) +
labs(title = "LM based on Cumulative Time",
subtitle = "Polynomial of grade 2",
x = "Cumulative Time",
y = "Probability of seed removal") +
theme(legend.title = element_blank())
# Grade 3
ggplot(df_clean, aes(x = tcum, y = p_seed_rem, color = species)) +
geom_point(
alpha=0.8,
size=4,
stroke = 1
) +
geom_smooth(method = "lm", formula= y~poly(x,3), col = secondary_col) +
theme_ipsum() +
scale_color_manual(values=c(pol_col, psd_col)) +
labs(title = "LM based on Cumulative Time",
subtitle = "Polynomial of grade 3",
x = "Cumulative Time",
y = "Probability of seed removal") +
theme(legend.title = element_blank())
par(mfrow = c(2,2))
plot(model_time_poly3)
df_clean$month = as.factor(months(df_clean$date))
datatable(df_clean, rownames = FALSE)
model_month = lm(p_seed_rem~month, data=df_clean)
print(anova(model_month))
summary(model_month)
TukeyHSD(aov(model_month))
par(mfrow = c(2,2))
plot(model_month)
# create a simple df
col_names = c("model", "AIC", "BIC")
models = c("distance", "species", "cumulative time", "cumulative time (poly of grade 2)", "cumulative time (poly of grade 3)", "month")
AIC = c(AIC(model_dist), AIC(model_species), AIC(model_time), AIC(model_time_poly2), AIC(model_time_poly3), AIC(model_month))
BIC = c(BIC(model_dist), BIC(model_species), BIC(model_time), BIC(model_time_poly2), BIC(model_time_poly3), BIC(model_month))
eval_df = data.frame(models, AIC, BIC)
datatable(eval_df, rownames = FALSE, class = 'cell-border stripe')
model_exp_1 = lm(p_seed_rem~dist+species+month+tcum+available, data=df_clean)
summary(model_exp_1)
model_exp_2 = lm(p_seed_rem~species+month, data=df_clean)
summary(model_exp_2)
step(model_exp_1)
par(mfrow = c(2,2))
plot(model_exp_2)
model_exp_3 = lm(p_seed_rem~species+poly(tcum,3), data=df_clean)
summary(model_exp_3)
par(mfrow = c(2,2))
plot(model_exp_3)
# create a simple df
col_names = c("model", "AIC", "BIC")
models = c("distance", "species", "cumulative time", "cumulative time (poly of grade 2)", "cumulative time (poly of grade 3)", "month", "species + month", "species + cumulative time (poly of grade 3)")
AIC = c(AIC(model_dist), AIC(model_species), AIC(model_time), AIC(model_time_poly2), AIC(model_time_poly3), AIC(model_month), AIC(model_exp_2), AIC(model_exp_3))
BIC = c(BIC(model_dist), BIC(model_species), BIC(model_time), BIC(model_time_poly2), BIC(model_time_poly3), BIC(model_month), BIC(model_exp_2), BIC(model_exp_3))
eval_df = data.frame(models, AIC, BIC)
datatable(eval_df, rownames = FALSE, class = 'cell-border stripe')
# Convert RMD in R Script
knitr::purl("analysis.Rmd")
